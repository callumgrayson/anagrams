{"version":3,"sources":["helpers/createTree.js","components/v1.js","App.js","index.js"],"names":["setWordsToObject","list","len","length","wordsObj","currentNode","i","word","lenWord","j","char","end","hasOwnProperty","handleData","a","split","map","w","toLowerCase","checkAnagrams","inWord","inArr","startSearch","Date","now","inLength","inWordSorted","sort","join","temp","forEach","Number","push","endSearch","durationSearch","console","log","getXLengthWords","wArr","sorted","xLengthAnagrams","Object","values","arr","startSort","sortedAnagrams","b","endSort","durationSort","V1","props","useState","listSize","setListSize","searchTerm","setSearchTerm","searchInput","setSearchInput","displayAnagrams","setDisplayAnagrams","searchNumber","setSearchNumber","searchNumberInput","setSearchNumberInput","displayLengthAnagrams","setDisplayLengthAnagrams","tree","setTree","wordsArray","setWordsArray","useEffect","getUrl","data","localStorage","url","fetch","res","text","setItem","getItem","start","wTree","dur","newTree","newArr","getData","getAnagrams","inTerm","anags","handleSubmit","e","preventDefault","handleLengthSubmit","value","onChange","target","onSubmit","type","maxLength","placeholder","required","onClick","ana","key","min","max","style","width","0","outObj","el","keys","prepareLengthAnagrams","obj","Array","isArray","App","className","ReactDOM","render","document","getElementById"],"mappings":"kPACMA,EAAmB,SAACC,GAMzB,IALA,IAAMC,EAAMD,EAAKE,OACbC,EAAW,GACXC,EAAc,GAGTC,EAAI,EAAGA,EAAIJ,EAAKI,IAAK,CAC7B,IAAIC,EAAON,EAAKK,GACZE,EAAUD,EAAKJ,OACnBE,EAAcD,EAGd,IAAK,IAAIK,EAAI,EAAGA,EAAID,EAASC,IAAK,CACjC,IAAIC,EAAOH,EAAKE,GACZE,EAAMF,IAAMD,EAAU,EACTH,EAAYO,eAAeF,IAKb,IAA1BL,EAAYK,GAAMC,MAAyB,IAARA,IACtCN,EAAYK,GAAMC,KAAM,GAHzBN,EAAYK,GAAQ,CAAEC,IAAKA,GAM5BN,EAAcA,EAAYK,IAG5B,OAAON,GAGKS,EAAU,uCAAG,WAAOZ,GAAP,iBAAAa,EAAA,6DACnBC,EAAQd,EAAKc,MAAM,MAAMC,KAAI,SAACC,GAAD,OAAOA,EAAEC,iBAEtCd,EAAWJ,EAAiBe,GAHT,kBAKlB,CAAEX,EAAUW,IALM,2CAAH,sDAUVI,EAAa,uCAAG,WAAOC,EAAQC,GAAf,yBAAAP,EAAA,6DACxBQ,EAAcC,KAAKC,MACjBC,EAAWL,EAAOjB,OAClBuB,EAAeN,EAAOL,MAAM,IAAIY,OAAOC,KAAK,IAC9CC,EAAO,GACXR,EAAMS,SAAQ,SAACvB,GACVA,EAAKJ,SAAW4B,OAAON,KACXlB,EAAKQ,MAAM,IAAIY,OAAOC,KAAK,MAC3BF,GACdG,EAAKG,KAAKzB,OAIT0B,EAAYV,KAAKC,MACjBU,EAAiBD,EAAYX,EACjCa,QAAQC,IAAI,iBAAkBF,GAfF,kBAkBrBL,GAlBqB,2CAAH,wDAqBbQ,EAAe,uCAAG,WAAOZ,EAAUa,GAAjB,+BAAAxB,EAAA,6DAE1BQ,EAAcC,KAAKC,MACnBK,EAAO,GACXS,EAAKR,SAAQ,SAACvB,GACb,GAAIA,EAAKJ,SAAW4B,OAAON,GAAW,CACrC,IAAMc,EAAShC,EAAKQ,MAAM,IAAIY,OAAOC,KAAK,IACrCC,EAAKjB,eAAe2B,GAGxBV,EAAKU,GAAL,sBAAoBV,EAAKU,IAAzB,CAAkChC,IAFlCsB,EAAKU,GAAU,CAAEhC,OAOdiC,EAAkB,GACxBC,OAAOC,OAAOb,GAAMC,SAAQ,SAACa,GACxBA,EAAIxC,OAAS,GAAGqC,EAAgBR,KAAKW,MAEtCV,EAAYV,KAAKC,MACjBU,EAAiBD,EAAYX,EAE7BsB,EAAYrB,KAAKC,MACfqB,EAAiBL,EAAgBb,MAAK,SAACb,EAAGgC,GAAJ,OAAUA,EAAE3C,OAASW,EAAEX,UAC/D4C,EAAUxB,KAAKC,MACfwB,EAAeD,EAAUH,EAG7BT,QAAQC,IAAI,iBAAkBF,GAC9BC,QAAQC,IAAI,eAAgBY,GA7BE,kBA8BvBH,GA9BuB,4CAAH,wD,yjBCtD5B,IAqOeI,EArOJ,SAACC,GAAW,IAAD,EACaC,mBAAS,SADtB,mBACbC,EADa,KACHC,EADG,OAGiBF,mBAAS,IAH1B,mBAGbG,EAHa,KAGDC,EAHC,OAImBJ,mBAAS,IAJ5B,mBAIbK,EAJa,KAIAC,EAJA,OAK2BN,mBAAS,IALpC,mBAKbO,EALa,KAKIC,EALJ,OAOqBR,mBAAS,IAP9B,mBAObS,EAPa,KAOCC,EAPD,OAQ+BV,mBAAS,IARxC,mBAQbW,EARa,KAQMC,EARN,OASuCZ,mBAAS,IAThD,mBASba,EATa,KASUC,EATV,OAUKd,mBAAS,IAVd,mBAUbe,EAVa,KAUPC,EAVO,OAWiBhB,mBAAS,IAX1B,mBAWbiB,EAXa,KAWDC,EAXC,KAarBC,qBACC,WACC,IAAMC,EAAS,WACd,OAAQnB,GACP,IAAK,QACJ,MAAO,6IACR,IAAK,QACJ,MAAO,2IACR,QACC,MAAO,MAIG,uCAAG,kDAAAtC,EAAA,yDACX0D,EAAO,IAGPJ,IAAcA,EAAWxD,eAAewC,GAJ7B,oDAkBVqB,aAAa7D,eAAewC,GAlBlB,wBAmBRsB,EAAMH,IAnBE,SAoBII,MAAMD,GApBV,cAoBRE,EApBQ,iBAqBDA,EAAIC,OArBH,QAqBdL,EArBc,OAuBdC,aAAaK,QAAQ1B,EAAUoB,GAvBjB,wBAyBdA,EAAOC,aAAaM,QAAQ3B,GAzBd,eA6BX4B,EAAQzD,KAAKC,MA7BF,UA8BeX,EAAW2D,GA9B1B,oCA8BPS,EA9BO,KA8BA3C,EA9BA,KAgCX3B,EAAMY,KAAKC,MACX0D,EAAMvE,EAAMqE,EAChB7C,QAAQC,IAAI,6BAA8B8C,GAGpCC,EArCS,KAqCMjB,EArCN,eAqCad,EAAW6B,IACjCG,EAtCS,KAsCKhB,EAtCL,eAsCkBhB,EAAWd,IAC5C6B,EAAQgB,GACRd,EAAce,GAxCC,4CAAH,qDA2CbC,KAED,CAAEjC,EAAUc,EAAME,IAGnBE,qBACC,WAEC,IAAMgB,EAAW,uCAAG,WAAOC,GAAP,eAAAzE,EAAA,sEAEDK,EAAcoE,EAAQnB,EAAWhB,IAFhC,OAEfoC,EAFe,OAGflC,IAAekC,EAAMrF,SACxBqF,EAAQ,CAAE,0BAEX7B,EAAmB6B,GANA,2CAAH,sDASblC,GAAcc,EAAWxD,eAAewC,IAC3CkC,EAAYhC,KAEd,CAAEA,EAAYc,EAAYhB,IAG3BkB,qBACC,WAEC,IAAMgB,EAAW,uCAAG,WAAO7D,GAAP,eAAAX,EAAA,sEACDuB,EACjBZ,EACA2C,EAAWhB,IAHO,OACfoC,EADe,OAKf5B,IAAiB4B,EAAMrF,SAC1BqF,EAAQ,CAAE,CAAE,2BAEbvB,EAAyBuB,GARN,2CAAH,sDAWb5B,GAAgBQ,EAAWxD,eAAewC,IAC7CkC,EAAY1B,KAEd,CAAEA,EAAcQ,EAAYhB,IAG7B,IAGMqC,EAAe,SAACC,GACrBA,EAAEC,iBACFpC,EAAcC,IAMToC,EAAqB,SAACF,GAC3BA,EAAEC,iBACF9B,EAAgBC,IAqBjB,OACC,6BACC,6BACC,mDACA,4BACC+B,MAAOzC,EACP0C,SAAU,SAACJ,GAEVrC,EAAYqC,EAAEK,OAAOF,SAGtB,4BAAQA,MAAM,SAAd,eACA,4BAAQA,MAAM,SAAd,kBAGF,6BACC,mDACA,0BAAMG,SAAUP,GACf,2BACCQ,KAAK,OACLJ,MAAOrC,EACPsC,SAvDgB,SAACJ,GACrBjC,EAAeiC,EAAEK,OAAOF,QAuDpBK,UAAW,GACXC,YAAY,qBACZC,UAAQ,IAET,4BAAQC,QAASZ,GAAjB,WAED,6BACC,4BACE/B,GACAA,EAAgB1C,KAAI,SAACsF,EAAKhG,GACzB,OAAO,wBAAIiG,IAAG,UAAKjG,GAAL,OAASgG,IAAQA,SAMpC,6BACC,kDACA,0BAAMN,SAAUJ,GACf,2BACCK,KAAK,SACLO,IAAK,EACLC,IAAK,GACLZ,MAAO/B,EACPgC,SAxEsB,SAACJ,GAC3B3B,EAAqB2B,EAAEK,OAAOF,QAwE1BM,YAAY,oBACZC,UAAQ,EACRM,MAAO,CAAEC,MAAO,WAEjB,4BAAQN,QAAST,GAAjB,WAED,6BACE5B,EAAsB7D,OAAS,GAxEN,SAACF,GAC9B,GAAIA,EAAKE,OAAS,EAAG,MAAO,CAAE,CAAEyG,EAAG,CAAE,MACrC,IAAMC,EAAS,GAcf,OAbA5G,EAAK6B,SAAQ,SAACgF,GACb,IAAM5G,EAAM4G,EAAG3G,OACX0G,EAAOjG,eAAeV,GACzB2G,EAAO3G,GAAK8B,KAAK8E,GAEjBD,EAAO3G,GAAO,CAAE4G,MAIQrE,OAAOsE,KAAKF,GAAQlF,MAAK,SAACb,EAAGgC,GAAJ,OAAUA,EAAIhC,KAChCE,KAAI,SAACuF,GACrC,OAAO,eAAGA,EAAMM,EAAON,OA2DpBS,CACChD,GACChD,KAAI,SAACiG,GACN,IAAI/G,EAAM+G,EAAMxE,OAAOsE,KAAKE,GAAK,GAAK,EACtC,OACC,yBAAKV,IAAKrG,GACT,4BAAa,MAARA,EAAc,EAAIA,EAAvB,eACA,4BACE+G,EAAI/G,GAAKc,KAAI,SAACsF,EAAKhG,GACnB,OAAO4G,MAAMC,QAAQb,IACrBA,EAAInG,OACH,wBAAIoG,IAAG,UAAKjG,GAAL,OAASgG,EAAI,KAClBA,EAAI1E,KAAK,QAGX0E,c,MClNGc,MATf,WACC,OACC,yBAAKC,UAAU,OACd,wCACA,kBAAC,EAAD,QCJHC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.7844f888.chunk.js","sourcesContent":["//\r\nconst setWordsToObject = (list) => {\r\n\tconst len = list.length;\r\n\tlet wordsObj = {};\r\n\tlet currentNode = {};\r\n\r\n\t// iterate through list or words\r\n\tfor (let i = 0; i < len; i++) {\r\n\t\tlet word = list[i];\r\n\t\tlet lenWord = word.length;\r\n\t\tcurrentNode = wordsObj;\r\n\r\n\t\t// iterate through chars in word\r\n\t\tfor (let j = 0; j < lenWord; j++) {\r\n\t\t\tlet char = word[j];\r\n\t\t\tlet end = j === lenWord - 1 ? true : false;\r\n\t\t\tlet nodeExists = currentNode.hasOwnProperty(char);\r\n\r\n\t\t\tif (!nodeExists) {\r\n\t\t\t\tcurrentNode[char] = { end: end };\r\n\t\t\t} else {\r\n\t\t\t\tif (currentNode[char].end === false && end === true) {\r\n\t\t\t\t\tcurrentNode[char].end = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcurrentNode = currentNode[char];\r\n\t\t}\r\n\t}\r\n\treturn wordsObj;\r\n};\r\n\r\nexport const handleData = async (list) => {\r\n\tconst split = list.split('\\n').map((w) => w.toLowerCase());\r\n\r\n\tconst wordsObj = setWordsToObject(split);\r\n\r\n\treturn [ wordsObj, split ];\r\n};\r\n\r\n//\r\n\r\nexport const checkAnagrams = async (inWord, inArr) => {\r\n\tlet startSearch = Date.now();\r\n\tconst inLength = inWord.length;\r\n\tconst inWordSorted = inWord.split('').sort().join('');\r\n\tlet temp = [];\r\n\tinArr.forEach((word) => {\r\n\t\tif (word.length === Number(inLength)) {\r\n\t\t\tconst sorted = word.split('').sort().join('');\r\n\t\t\tif (sorted === inWordSorted) {\r\n\t\t\t\ttemp.push(word);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\tlet endSearch = Date.now();\r\n\tlet durationSearch = endSearch - startSearch;\r\n\tconsole.log('durationSearch', durationSearch);\r\n\r\n\t// console.log('temp', temp);\r\n\treturn temp;\r\n};\r\n\r\nexport const getXLengthWords = async (inLength, wArr) => {\r\n\t//\r\n\tlet startSearch = Date.now();\r\n\tlet temp = {};\r\n\twArr.forEach((word) => {\r\n\t\tif (word.length === Number(inLength)) {\r\n\t\t\tconst sorted = word.split('').sort().join('');\r\n\t\t\tif (!temp.hasOwnProperty(sorted)) {\r\n\t\t\t\ttemp[sorted] = [ word ];\r\n\t\t\t} else {\r\n\t\t\t\ttemp[sorted] = [ ...temp[sorted], word ];\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tconst xLengthAnagrams = [];\r\n\tObject.values(temp).forEach((arr) => {\r\n\t\tif (arr.length > 1) xLengthAnagrams.push(arr);\r\n\t});\r\n\tlet endSearch = Date.now();\r\n\tlet durationSearch = endSearch - startSearch;\r\n\r\n\tlet startSort = Date.now();\r\n\tconst sortedAnagrams = xLengthAnagrams.sort((a, b) => b.length - a.length);\r\n\tlet endSort = Date.now();\r\n\tlet durationSort = endSort - startSort;\r\n\r\n\t// console.log('sortedAnagrams', sortedAnagrams);\r\n\tconsole.log('durationSearch', durationSearch);\r\n\tconsole.log('durationSort', durationSort);\r\n\treturn sortedAnagrams;\r\n};\r\n\r\n////////////////////////////////////////////////////\r\n// const checkNode = (inNode) => {\r\n// \tconst { currentNode, preArr, restArr } = inNode;\r\n// \tconst nextObjects = [];\r\n// \tconst len = restArr.length;\r\n\r\n// \tif (len === 1) {\r\n// \t\t// we are checking for the last letter\r\n// \t\t// if it exists and end is true we have a match\r\n// \t\tlet finalChar = restArr[0];\r\n// \t\tif (\r\n// \t\t\tcurrentNode.hasOwnProperty(finalChar) &&\r\n// \t\t\tcurrentNode[finalChar].end === true\r\n// \t\t) {\r\n// \t\t\tconst match = [ ...preArr, finalChar ].join('');\r\n// \t\t\tnextObjects.push({ match: match });\r\n// \t\t}\r\n// \t} else {\r\n// \t\tfor (let i = 0; i < len; i++) {\r\n// \t\t\tlet before = [ ...restArr.slice(0, i) ];\r\n// \t\t\tlet char = restArr[i];\r\n// \t\t\tlet after = [ ...restArr.slice(i + 1) ];\r\n\r\n// \t\t\tif (char && currentNode.hasOwnProperty(char)) {\r\n// \t\t\t\tconst newObj = {\r\n// \t\t\t\t\tcurrentNode: currentNode[char],\r\n// \t\t\t\t\tpreArr: [ ...preArr, char ],\r\n// \t\t\t\t\trestArr: [ ...before, ...after ]\r\n// \t\t\t\t};\r\n// \t\t\t\tnextObjects.push(newObj);\r\n// \t\t\t}\r\n// \t\t}\r\n// \t}\r\n\r\n// \treturn nextObjects;\r\n// };\r\n\r\n// export const checkAnagrams = async (inWord, inTree) => {\r\n// \t// Search and timings\r\n// \tlet startSearch = Date.now();\r\n// \tconst wArr = inWord.split('');\r\n// \tlet q = [ { currentNode: inTree, preArr: [], restArr: wArr } ];\r\n// \tlet anagramsSet = new Set();\r\n\r\n// \twhile (q.length) {\r\n// \t\tlet c = q.shift();\r\n\r\n// \t\tif (c.restArr.length) {\r\n// \t\t\tlet nodeInfo = checkNode(c);\r\n// \t\t\t// console.log('nodeInfo', nodeInfo);\r\n// \t\t\tnodeInfo.forEach((el) => {\r\n// \t\t\t\tif (el.hasOwnProperty('match')) {\r\n// \t\t\t\t\tanagramsSet.add(el.match);\r\n// \t\t\t\t} else {\r\n// \t\t\t\t\tq.push(el);\r\n// \t\t\t\t}\r\n// \t\t\t});\r\n// \t\t}\r\n// \t}\r\n// \tconst anagrams = Array.from(anagramsSet);\r\n// \tlet endSearch = Date.now();\r\n// \tlet durationSearch = endSearch - startSearch;\r\n// \tconsole.log('durationSearch', durationSearch);\r\n// \t// console.log('anagrams', anagrams);\r\n// \treturn anagrams;\r\n// };\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport {\r\n\thandleData,\r\n\tcheckAnagrams,\r\n\tgetXLengthWords\r\n} from '../helpers/createTree';\r\n\r\nconst V1 = (props) => {\r\n\tconst [ listSize, setListSize ] = useState('small');\r\n\r\n\tconst [ searchTerm, setSearchTerm ] = useState('');\r\n\tconst [ searchInput, setSearchInput ] = useState('');\r\n\tconst [ displayAnagrams, setDisplayAnagrams ] = useState([]);\r\n\r\n\tconst [ searchNumber, setSearchNumber ] = useState('');\r\n\tconst [ searchNumberInput, setSearchNumberInput ] = useState('');\r\n\tconst [ displayLengthAnagrams, setDisplayLengthAnagrams ] = useState([]);\r\n\tconst [ tree, setTree ] = useState({});\r\n\tconst [ wordsArray, setWordsArray ] = useState({});\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tconst getUrl = () => {\r\n\t\t\t\tswitch (listSize) {\r\n\t\t\t\t\tcase 'small':\r\n\t\t\t\t\t\treturn 'https://gist.githubusercontent.com/callumgrayson/452618a6cccc79dcfd5bcada74169d8f/raw/e2afcae22e0da19acafe94818fd237da855bbc2c/corncob.txt';\r\n\t\t\t\t\tcase 'large':\r\n\t\t\t\t\t\treturn 'https://gist.githubusercontent.com/callumgrayson/caf0f4f67ecbbd13579441a59facfefc/raw/61c2ce99798596bcf2203b91801e64d4ba0545c8/words.txt';\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tconst getData = async () => {\r\n\t\t\t\tlet data = {};\r\n\r\n\t\t\t\t// console.log('tree', tree);\r\n\t\t\t\tif (wordsArray && wordsArray.hasOwnProperty(listSize)) {\r\n\t\t\t\t\t// console.log(\r\n\t\t\t\t\t// \t'wordsArray.hasOwnProperty(listSize)',\r\n\t\t\t\t\t// \twordsArray.hasOwnProperty(listSize)\r\n\t\t\t\t\t// );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// console.log(\r\n\t\t\t\t// \t'localStorage.hasOwnProperty(listSize), listSize',\r\n\t\t\t\t// \tlocalStorage.hasOwnProperty(listSize),\r\n\t\t\t\t// \tlistSize\r\n\t\t\t\t// );\r\n\r\n\t\t\t\tif (!localStorage.hasOwnProperty(listSize)) {\r\n\t\t\t\t\tconst url = getUrl();\r\n\t\t\t\t\tconst res = await fetch(url);\r\n\t\t\t\t\tdata = await res.text();\r\n\t\t\t\t\t// console.log('data', data);\r\n\t\t\t\t\tlocalStorage.setItem(listSize, data);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdata = localStorage.getItem(listSize);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// console.log('data[listSize]', data[listSize]);\r\n\t\t\t\tlet start = Date.now();\r\n\t\t\t\tconst [ wTree, wArr ] = await handleData(data);\r\n\t\t\t\t// console.log('wTree, wArr', wTree, wArr);\r\n\t\t\t\tlet end = Date.now();\r\n\t\t\t\tlet dur = end - start;\r\n\t\t\t\tconsole.log('Array preparation duration', dur);\r\n\r\n\t\t\t\t// console.log('tree', tree);\r\n\t\t\t\tconst newTree = { ...tree, [listSize]: wTree };\r\n\t\t\t\tconst newArr = { ...wordsArray, [listSize]: wArr };\r\n\t\t\t\tsetTree(newTree);\r\n\t\t\t\tsetWordsArray(newArr);\r\n\t\t\t};\r\n\r\n\t\t\tgetData();\r\n\t\t},\r\n\t\t[ listSize, tree, wordsArray ]\r\n\t);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\t// console.log('tree', tree);\r\n\t\t\tconst getAnagrams = async (inTerm) => {\r\n\t\t\t\t// let anags = await checkAnagrams(inTerm, tree[listSize]);\r\n\t\t\t\tlet anags = await checkAnagrams(inTerm, wordsArray[listSize]);\r\n\t\t\t\tif (searchTerm && !anags.length) {\r\n\t\t\t\t\tanags = [ 'There are no anagrams' ];\r\n\t\t\t\t}\r\n\t\t\t\tsetDisplayAnagrams(anags);\r\n\t\t\t};\r\n\r\n\t\t\tif (searchTerm && wordsArray.hasOwnProperty(listSize))\r\n\t\t\t\tgetAnagrams(searchTerm);\r\n\t\t},\r\n\t\t[ searchTerm, wordsArray, listSize ]\r\n\t);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\t// console.log('wordsArray', wordsArray);\r\n\t\t\tconst getAnagrams = async (inLength) => {\r\n\t\t\t\tlet anags = await getXLengthWords(\r\n\t\t\t\t\tinLength,\r\n\t\t\t\t\twordsArray[listSize]\r\n\t\t\t\t);\r\n\t\t\t\tif (searchNumber && !anags.length) {\r\n\t\t\t\t\tanags = [ [ 'There are no anagrams' ] ];\r\n\t\t\t\t}\r\n\t\t\t\tsetDisplayLengthAnagrams(anags);\r\n\t\t\t};\r\n\r\n\t\t\tif (searchNumber && wordsArray.hasOwnProperty(listSize))\r\n\t\t\t\tgetAnagrams(searchNumber);\r\n\t\t},\r\n\t\t[ searchNumber, wordsArray, listSize ]\r\n\t);\r\n\r\n\tconst handleChange = (e) => {\r\n\t\tsetSearchInput(e.target.value);\r\n\t};\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tsetSearchTerm(searchInput);\r\n\t};\r\n\r\n\tconst handleNumberChange = (e) => {\r\n\t\tsetSearchNumberInput(e.target.value);\r\n\t};\r\n\tconst handleLengthSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tsetSearchNumber(searchNumberInput);\r\n\t};\r\n\r\n\tconst prepareLengthAnagrams = (list) => {\r\n\t\tif (list.length < 1) return [ { 0: [ '' ] } ];\r\n\t\tconst outObj = {};\r\n\t\tlist.forEach((el) => {\r\n\t\t\tconst len = el.length;\r\n\t\t\tif (outObj.hasOwnProperty(len)) {\r\n\t\t\t\toutObj[len].push(el);\r\n\t\t\t} else {\r\n\t\t\t\toutObj[len] = [ el ];\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconst descendingLengths = Object.keys(outObj).sort((a, b) => b - a);\r\n\t\tconst outArr = descendingLengths.map((key) => {\r\n\t\t\treturn { [key]: outObj[key] };\r\n\t\t});\r\n\t\treturn outArr;\r\n\t};\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div>\r\n\t\t\t\t<span>Dictionary size: </span>\r\n\t\t\t\t<select\r\n\t\t\t\t\tvalue={listSize}\r\n\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t// console.log('e.target.value', e.target.value);\r\n\t\t\t\t\t\tsetListSize(e.target.value);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<option value=\"small\">Small (58k)</option>\r\n\t\t\t\t\t<option value=\"large\">Large (230k)</option>\r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<h3>Anagrams by letters</h3>\r\n\t\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tvalue={searchInput}\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\tmaxLength={29}\r\n\t\t\t\t\t\tplaceholder=\"enter word/letters\"\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<button onClick={handleSubmit}>Search</button>\r\n\t\t\t\t</form>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{displayAnagrams &&\r\n\t\t\t\t\t\t\tdisplayAnagrams.map((ana, i) => {\r\n\t\t\t\t\t\t\t\treturn <li key={`${i}${ana}`}>{ana}</li>;\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<h3>Anagrams by length</h3>\r\n\t\t\t\t<form onSubmit={handleLengthSubmit}>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\tmin={2}\r\n\t\t\t\t\t\tmax={29}\r\n\t\t\t\t\t\tvalue={searchNumberInput}\r\n\t\t\t\t\t\tonChange={handleNumberChange}\r\n\t\t\t\t\t\tplaceholder=\"enter word length\"\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t\tstyle={{ width: '173px' }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<button onClick={handleLengthSubmit}>Search</button>\r\n\t\t\t\t</form>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{displayLengthAnagrams.length > 0 &&\r\n\t\t\t\t\t\tprepareLengthAnagrams(\r\n\t\t\t\t\t\t\tdisplayLengthAnagrams\r\n\t\t\t\t\t\t).map((obj) => {\r\n\t\t\t\t\t\t\tlet len = obj ? Object.keys(obj)[0] : 0;\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={len}>\r\n\t\t\t\t\t\t\t\t\t<h4>{len === '1' ? 0 : len} variations</h4>\r\n\t\t\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t\t\t{obj[len].map((ana, i) => {\r\n\t\t\t\t\t\t\t\t\t\t\treturn Array.isArray(ana) &&\r\n\t\t\t\t\t\t\t\t\t\t\tana.length ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<li key={`${i}${ana[0]}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ana.join(' - ')}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t\tana\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default V1;\r\n","import React from 'react';\n\nimport V1 from './components/v1';\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h2>Anagrams</h2>\n\t\t\t<V1 />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}